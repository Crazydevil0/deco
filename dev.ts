#!/usr/bin/env -S deno run -A --watch=static/,routes/
import { dirname, fromFileUrl, join, toFileUrl } from "std/path/mod.ts";
import "std/dotenv/load.ts";
import { collect } from "$fresh/src/dev/mod.ts";
import { walk } from "std/fs/walk.ts";
import { filenameFromPath } from "./utils/component.ts";
import { setupGithooks } from "https://deno.land/x/githooks@0.0.3/githooks.ts";

interface EntityWithSchema {
  name: string;
  schema: Record<string, any>;
}

interface DevManifest {
  routes: string[];
  islands: EntityWithSchema[];
  components: EntityWithSchema[];
  loaders: EntityWithSchema[];
}

export async function dev(
  base: string,
  entrypoint: string,
  onListen?: () => void
) {
  entrypoint = new URL(entrypoint, base).href;

  const dir = dirname(fromFileUrl(base));

  let currentManifest: DevManifest;

  const prevManifest = Deno.env.get("FRSH_DEV_PREVIOUS_MANIFEST");

  if (prevManifest) {
    currentManifest = JSON.parse(prevManifest);
  } else {
    currentManifest = {
      islands: [],
      routes: [],
      components: [],
      loaders: [],
    };
  }

  const newManifest = await generateManifest(dir);

  Deno.env.set("FRSH_DEV_PREVIOUS_MANIFEST", JSON.stringify(newManifest));

  const manifestChanged =
    !arraysEqual(newManifest.routes, currentManifest.routes) ||
    !arraysEqual(newManifest.islands, currentManifest.islands) ||
    !arraysEqual(newManifest.components, currentManifest.components) ||
    !arraysEqual(newManifest.loaders, currentManifest.loaders);

  if (manifestChanged) await generate(dir, newManifest);

  await setupGithooks();

  if (onListen) onListen();

  await import(entrypoint);
}

async function loadModuleForEntity(
  dir: string,
  entityName: string,
  type: "loaders" | "islands" | "components"
) {
  const fileModule = await import(toFileUrl(join(dir, type, entityName)).href);

  return fileModule;
}

async function generateManifest(dir: string): Promise<DevManifest> {
  const [manifestFile, components, loaders] = await Promise.all([
    collect(dir),
    collectComponents(dir),
    collectLoaders(dir),
  ]);

  const componentsWithSchema = await Promise.all(
    components.map(async (componentName) => {
      const module = await loadModuleForEntity(
        dir,
        componentName,
        "components"
      );

      const schema = module?.schema || {};
      return { name: filenameFromPath(componentName), schema };
    })
  );

  const islandsWithSchema = await Promise.all(
    manifestFile.islands.map(async (islandName) => {
      const module = await loadModuleForEntity(dir, islandName, "islands");

      const schema = module?.schema || {};
      return { name: filenameFromPath(islandName), schema };
    })
  );

  const loadersWithSchema = await Promise.all(
    loaders.map(async (loaderName) => {
      const module = await loadModuleForEntity(dir, loaderName, "loaders");

      const schema = module?.default?.inputSchema || {};
      return { name: filenameFromPath(loaderName), schema };
    })
  );

  return {
    ...manifestFile,
    loaders: loadersWithSchema,
    components: componentsWithSchema,
    // TODO: Islands have one type in the original manifest and other here. Double check that
    islands: islandsWithSchema,
  };
}

export async function generate(directory: string, manifest: DevManifest) {
  const { routes, islands, components, schemas, loaders } = manifest;

  const output = `// DO NOT EDIT. This file is generated by deco.
    // This file SHOULD be checked into source version control.
    // This file is automatically updated during development when running \`dev.ts\`.

    import config from "./deno.json" assert { type: "json" };
    import { DecoManifest } from "$live/types.ts";
    ${routes.map(templates.routes.imports).join("\n")}
    ${islands.map(templates.islands.imports).join("\n")}
    ${components.map(templates.components.imports).join("\n")}
    ${loaders.map(templates.loaders.imports).join("\n")}

    const manifest: DecoManifest = {
      routes: {${routes.map(templates.routes.obj).join("\n")}},
      islands: {${islands.map(templates.islands.obj).join("\n")}},
      components: {${components.map(templates.components.obj).join("\n")}},
      loaders: {${loaders.map(templates.loaders.obj).join("\n")}},
      schemas: {${schemas.map(templates.schemas).join("\n")}},
      baseUrl: import.meta.url,
      config,
    };

    export default manifest;
    `;

  const manifestStr = await format(output);
  const manifestPath = join(directory, "./deco.gen.ts");

  await Deno.writeTextFile(manifestPath, manifestStr);
  console.log(
    `%cThe manifest has been generated for ${routes.length} routes, ${islands.length} islands and ${components.length} components.`,
    "color: green; font-weight: bold"
  );
}

function arraysEqual<T>(a: T[], b: T[]): boolean {
  if (a.length !== b.length) return false;
  for (let i = 0; i < a.length; ++i) {
    if (typeof a[i] === "object") {
      if (JSON.stringify(a[i]) !== JSON.stringify(b[i])) return false;

      continue;
    }

    if (a[i] !== b[i]) return false;
  }
  return true;
}

export async function format(content: string) {
  const proc = Deno.run({
    cmd: [Deno.execPath(), "fmt", "-"],
    stdin: "piped",
    stdout: "piped",
    stderr: "null",
  });

  const raw = new ReadableStream({
    start(controller) {
      controller.enqueue(new TextEncoder().encode(content));
      controller.close();
    },
  });
  await raw.pipeTo(proc.stdin.writable);
  const out = await proc.output();
  await proc.status();
  proc.close();

  return new TextDecoder().decode(out);
}

async function collectComponents(dir: string): Promise<string[]> {
  const componentsDir = join(dir, "./components");

  const componentNames = await collectFilesFromDir(componentsDir);

  return componentNames;
}

async function collectLoaders(dir: string): Promise<string[]> {
  const loadersDir = join(dir, "./loaders");

  const loaderNames = await collectFilesFromDir(loadersDir);

  return loaderNames;
}

async function collectFilesFromDir(dir: string) {
  const files = [];
  try {
    const dirURL = toFileUrl(dir);
    // TODO(lucacasonato): remove the extranious Deno.readDir when
    // https://github.com/denoland/deno_std/issues/1310 is fixed.
    for await (const _ of Deno.readDir(dir)) {
      // do nothing
    }

    const filesFromDir = walk(dir, {
      includeDirs: false,
      includeFiles: true,
      exts: ["tsx", "jsx", "ts", "js"],
    });

    for await (const entry of filesFromDir) {
      if (entry.isFile) {
        const file = toFileUrl(entry.path).href.substring(dirURL.href.length);
        files.push(file);
      }
    }
  } catch (err) {
    if (err instanceof Deno.errors.NotFound) {
      // Do nothing.
    } else {
      throw err;
    }
  }
  files.sort();

  return files;
}

const templates = {
  routes: {
    imports: (file: string, i: number) =>
      `import * as $${i} from "./routes${file}";`,
    obj: (file: string, i: number) =>
      `${JSON.stringify(`./routes${file}`)}: $${i},`,
  },
  islands: {
    imports: (file: string, i: number) =>
      `import * as $$${i} from "./islands${file}";`,
    obj: (file: string, i: number) =>
      `${JSON.stringify(`./islands${file}`)}: $$${i},`,
  },
  components: {
    imports: (file: string, i: number) =>
      `import * as $$$${i} from "./components${file}";`,
    obj: (file: string, i: number) =>
      `${JSON.stringify(`./components${file}`)}: $$$${i},`,
  },
  loaders: {
    imports: (file: string, i: number) =>
      `import * as $$$$${i} from "./loaders${file}";`,
    obj: (file: string, i: number) => `"./loaders${file}": $$$$${i},`,
  },
  schemas: ({ component, schema }: SchemaMap) =>
    `"${component}": ${schema ? JSON.stringify(schema) : null},`,
};
